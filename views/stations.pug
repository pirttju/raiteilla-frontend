extends layout

block content
  h1= t('All Stations')
  button#toggle-locations-btn.locations-toggle-button= t('showAllLocations')
  
  // This container will be populated by the script below
  #station-list-container
    p= t('Loading stations...')

block scripts
  script.
    document.addEventListener('DOMContentLoaded', async () => {
      const container = document.getElementById('station-list-container');
      const toggleBtn = document.getElementById('toggle-locations-btn');

      // State variables
      let showAll = false; // By default, we only show stations
      let allLocationsByCountry = {}; // Store the full data from the API

      const countryNames = {
        fi: '#{t("Finland")}',
        se: '#{t("Sweden")}',
        no: '#{t("Norway")}',
        gb: '#{t("Great Britain")}'
      };

      // A dedicated function to render the lists
      const renderStationLists = () => {
        container.innerHTML = ''; // Clear the container

        Object.keys(allLocationsByCountry).forEach(country => {
          const countryData = allLocationsByCountry[country];
          if (!countryData || !countryData.success) return;

          const countryHeader = document.createElement('h2');
          countryHeader.textContent = countryNames[country];
          container.appendChild(countryHeader);

          let locationsToRender = countryData.data.filter(loc => !loc.is_hidden);
          if (!showAll) {
            locationsToRender = locationsToRender.filter(loc => loc.type === 'station');
          }
          
          locationsToRender.sort((a, b) => a.name.localeCompare(b.name));

          let currentLetter = '';
          let currentList = null; // This will hold our active <ul> element

          locationsToRender.forEach(location => {
            const firstLetter = location.name.charAt(0).toUpperCase();
            
            // If the letter changes (and is a valid letter), create a new heading and a new list
            if (firstLetter && firstLetter !== currentLetter) {
              currentLetter = firstLetter;
              
              const letterHeading = document.createElement('h3');
              letterHeading.className = 'station-letter-heading';
              letterHeading.textContent = currentLetter;
              container.appendChild(letterHeading);

              // Create a list for this letter section
              currentList = document.createElement('ul');
              currentList.className = 'station-list-columns';
              container.appendChild(currentList);
            }

            // If a list exists (i.e., we've started), add the item to it
            if (currentList) {
              const listItem = document.createElement('li');
              const link = document.createElement('a');
              const today = new Date().toISOString().slice(0, 10);
              link.href = `/station/${location.feed_id}/${location.station}/${today}`;
              link.textContent = location.name;
              listItem.appendChild(link);
              currentList.appendChild(listItem);
            }
          });
        });
      };

      // --- Event listener for the toggle button ---
      toggleBtn.addEventListener('click', () => {
        showAll = !showAll; // Flip the state
        renderStationLists(); // Re-render the view with the new state
      });

      // --- Initial data fetching logic ---
      const countries = ['fi', 'se', 'no', 'gb'];
      const promises = countries.map(country => 
        fetch(`/train-api/v1/stations/${country}`)
          .then(res => res.json())
          .then(data => ({ country, data }))
      );

      try {
        const results = await Promise.all(promises);
        
        // Store all fetched data in our global object
        results.forEach(result => {
          allLocationsByCountry[result.country] = result.data;
        });
        
        // Perform the initial render with the default filter (showAll = false)
        renderStationLists();

      } catch (error) {
        console.error('Failed to fetch station lists:', error);
        container.innerHTML = '<p>Error loading station data. Please try again later.</p>';
      }
    });