extends layout

block content
  h1= t('All Stations')
  
  // This container will be populated by the script below
  #station-list-container
    p= t('Loading stations...')

block scripts
  script.
    document.addEventListener('DOMContentLoaded', async () => {
      const container = document.getElementById('station-list-container');
      
      // Map country codes to their translated names
      const countryNames = {
        fi: '#{t("Finland")}',
        se: '#{t("Sweden")}',
        no: '#{t("Norway")}',
        gb: '#{t("Great Britain")}'
      };

      const countries = ['fi', 'se', 'no', 'gb'];
      
      // Create a fetch promise for each country
      const promises = countries.map(country => 
        fetch(`/train-api/v1/stations/${country}`)
          .then(res => res.json())
          .then(data => ({ country, data })) // Pair the data with its country code
      );

      try {
        const today = new Date().toISOString().slice(0, 10);

        const results = await Promise.all(promises);
        
        // Clear the "Loading..." message
        container.innerHTML = ''; 

        results.forEach(result => {
          if (result.data.success) {
            // Create a heading for the country
            const countryHeader = document.createElement('h2');
            countryHeader.textContent = countryNames[result.country];
            container.appendChild(countryHeader);

            // Create a list for the stations
            const stationList = document.createElement('ul');
            stationList.className = 'station-list-columns';

            // Filter out hidden stations and sort alphabetically
            const stations = result.data.data
              .filter(station => !station.is_hidden)
              .sort((a, b) => a.name.localeCompare(b.name));

            stations.forEach(station => {
              const listItem = document.createElement('li');
              const link = document.createElement('a');
              link.href = `/station/${station.feed_id}/${station.station}/${today}`;
              link.textContent = station.name;
              listItem.appendChild(link);
              stationList.appendChild(listItem);
            });

            container.appendChild(stationList);
          }
        });
      } catch (error) {
        console.error('Failed to fetch station lists:', error);
        container.innerHTML = '<p>Error loading station data. Please try again later.</p>';
      }
    });