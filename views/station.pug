extends layout

block content
  //- Use data attributes to pass server-side variables to client-side script
  h1#station-title(data-country=country data-station=station) #{t('Timetable for')} #{station}
  
  table
    thead
      tr
        th= t('Train')
        th= t('Origin')
        th= t('Destination')
        th= t('Arrival')
        th= t('Departure')
        th= t('Platform')
        th= t('Status')
    tbody#timetable-body
      //- Content will be populated by JavaScript

  p#no-trains-message(style='display: none;')= t('No trains scheduled today.')

block scripts
  script.
    document.addEventListener('DOMContentLoaded', async () => {
      const stationTitle = document.getElementById('station-title');
      const country = stationTitle.dataset.country;
      const stationCode = stationTitle.dataset.station;
      const timetableBody = document.getElementById('timetable-body');
      const noTrainsMessage = document.getElementById('no-trains-message');

      // Map country codes to IANA timezone names
      const timezoneMap = {
        fi: 'Europe/Helsinki',
        se: 'Europe/Stockholm',
        no: 'Europe/Oslo'
      };
      const timezone = timezoneMap[country] || 'UTC'; // Fallback to UTC if country is unknown

      const today = new Date().toISOString().slice(0, 10);
      const apiUrl = `/train-api/v1/stations/${country}/${stationCode}/${today}`;

      const formatTime = (isoString, tz) => {
        if (!isoString) return '—';
        return new Date(isoString).toLocaleTimeString(navigator.language, {
          hour: '2-digit',
          minute: '2-digit',
          timeZone: tz // Use the provided timezone
        });
      };

      const displayTime = (scheduled, estimated, actual, tz) => {
        if (!scheduled) return '—';
        const scheduledTime = formatTime(scheduled, tz);

        if (actual) {
          const actualTime = formatTime(actual, tz);
          if (actualTime !== scheduledTime) {
            return `<span class="actual">${actualTime}</span><br><s class="scheduled">${scheduledTime}</s>`;
          }
          return `<span class="actual">${actualTime}</span>`;
        }

        if (estimated) {
          const estimatedTime = formatTime(estimated, tz);
          if (estimatedTime !== scheduledTime) {
            return `<span class="estimated">${estimatedTime}</span><br><s class="scheduled">${scheduledTime}</s>`;
          }
        }
        
        return `<span>${scheduledTime}</span>`;
      };

      const getStatus = (scheduled, estimated, actual, cancelled) => {
        // This function doesn't format time, so it needs no change
        if (cancelled) return `<span class="status-cancelled">${window.i18n.cancelled}</span>`;
        if (!scheduled) return '';
        const finalTime = actual || estimated;
        if (!finalTime) return `<span class="status-ontime">${window.i18n.onTime}</span>`;
        const delay = Math.round((new Date(finalTime) - new Date(scheduled)) / 60000);
        if (delay > 0) {
          return `<span class="status-delayed">${window.i18n.delayed} ${delay} ${window.i18n.minutes}</span>`;
        }
        return `<span class="status-ontime">${window.i18n.onTime}</span>`;
      };

      try {
        const response = await fetch(apiUrl);
        const result = await response.json();

        if (result.success && result.data.length > 0) {
          result.data.forEach(train => {
            const row = document.createElement('tr');
            
            // UPDATED: Pass the timezone to the displayTime function
            const arrivalDisplay = displayTime(train.arrival, train.estimated_arrival, train.actual_arrival, timezone);
            const departureDisplay = displayTime(train.departure, train.estimated_departure, train.actual_departure, timezone);

            const arrivalStatus = getStatus(train.arrival, train.estimated_arrival, train.actual_arrival, train.cancelled_arrival);
            const departureStatus = getStatus(train.departure, train.estimated_departure, train.actual_departure, train.cancelled_departure);

            row.innerHTML = `
              <td><a href="/train/${country}/${train.train_number}/${train.departure_date}">${train.train_type} ${train.train_number}</a></td>
              <td>${train.origin_name}</td>
              <td>${train.destination_name}</td>
              <td>${arrivalDisplay}</td>
              <td>${departureDisplay}</td>
              <td>${train.platform || '—'}</td>
              <td>${train.arrival ? arrivalStatus : departureStatus}</td>
            `;
            timetableBody.appendChild(row);
          });
        } else {
          noTrainsMessage.style.display = 'block';
        }
      } catch (error) {
        console.error('Failed to fetch station data:', error);
        timetableBody.innerHTML = '<tr><td colspan="7">Error loading data.</td></tr>';
      }
    });