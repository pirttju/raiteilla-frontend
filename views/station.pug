extends layout

block content
  //- Use data attributes to pass server-side variables to client-side script
  h1#station-title(data-country=country data-station=station data-date=date) #{t('timetableFor')} #{station}
  div#station-details.station-meta
  table
    thead
      tr
        th= t('Train')
        th= t('Origin')
        th= t('Destination')
        th= t('Arrival')
        th= t('Departure')
        th= t('Platform')
        th= t('Status')
    tbody#timetable-body
      //- Content will be populated by JavaScript

  p#no-trains-message(style='display: none;')= t('No trains scheduled today.')

block scripts
  script.
    document.addEventListener('DOMContentLoaded', async () => {
      const stationTitle = document.getElementById('station-title');
      const detailsContainer = document.getElementById('station-details');
      const { country, station: stationCode, date } = stationTitle.dataset;
      
      const timetableBody = document.getElementById('timetable-body');
      const noTrainsMessage = document.getElementById('no-trains-message');

      const timetableApiUrl = `/train-api/v1/stations/${country}/${stationCode}/${date}`;
      const stationInfoApiUrl = `/train-api/v1/stations/${country}/${stationCode}`;

      const timezoneMap = { fi: 'Europe/Helsinki', se: 'Europe/Stockholm', no: 'Europe/Oslo', gb: 'Europe/London' };
      const timezone = timezoneMap[country] || 'UTC';
      const formatTime = (isoString, tz) => { if (!isoString) return '—'; return new Date(isoString).toLocaleTimeString(navigator.language, { hour: '2-digit', minute: '2-digit', timeZone: tz }); };
      const displayTime = (scheduled, estimated, actual, tz) => { if (!scheduled) return '—'; const scheduledTime = formatTime(scheduled, tz); if (actual) { const actualTime = formatTime(actual, tz); if (actualTime !== scheduledTime) { return `<span class="actual">${actualTime}</span><br><s class="scheduled">${scheduledTime}</s>`; } return `<span class="actual">${actualTime}</span>`; } if (estimated) { const estimatedTime = formatTime(estimated, tz); if (estimatedTime !== scheduledTime) { return `<span class="estimated">${estimatedTime}</span><br><s class="scheduled">${scheduledTime}</s>`; } } return `<span>${scheduledTime}</span>`; };
      const getStatus = (scheduled, estimated, actual, cancelled) => { if (cancelled) return `<span class="status-cancelled">${window.i18n.cancelled}</span>`; if (!scheduled) return ''; const finalTime = actual || estimated; if (!finalTime) return `<span class="status-ontime">${window.i18n.onTime}</span>`; const delay = Math.round((new Date(finalTime) - new Date(scheduled)) / 60000); if (delay > 0) { return `<span class="status-delayed">${window.i18n.delayed} ${delay} ${window.i18n.minutes}</span>`; } return `<span class="status-ontime">${window.i18n.onTime}</span>`; };

      try {
        // Fetch timetable and station info in parallel
        const [timetableResponse, stationInfoResponse] = await Promise.all([
          fetch(timetableApiUrl).then(res => res.json()),
          fetch(stationInfoApiUrl).then(res => res.json())
        ]);

        if (stationInfoResponse.success && stationInfoResponse.data) {
          const stationInfo = stationInfoResponse.data;

          const codeInBrackets = stationInfo.commercial_code || stationInfo.station;
          const newTitle = `${window.i18n.timetableFor} ${stationInfo.name} (${codeInBrackets})`;

          stationTitle.innerText = newTitle;
          document.title = newTitle;

          const detailsParts = [];

          if (stationInfo.country_code && stationInfo.primary_code) {
            detailsParts.push(`<strong>${window.i18n.stationIdentifier}:</strong> ${stationInfo.country_code}${stationInfo.primary_code}`);
          }

          if (stationInfo.km_m) {
            detailsParts.push(`<strong>${window.i18n.kilometerMarker}:</strong> ${stationInfo.km_m}`);
          }

          detailsContainer.innerHTML = detailsParts.join(' | ');
        }

        if (timetableResponse.success && timetableResponse.data.length > 0) {
          timetableResponse.data.forEach(train => {
            const row = document.createElement('tr');
            const displayNumber = country === 'gb' && train.headcode ? train.headcode : train.train_number;
            const arrivalDisplay = displayTime(train.arrival, train.estimated_arrival, train.actual_arrival, timezone);
            const departureDisplay = displayTime(train.departure, train.estimated_departure, train.actual_departure, timezone);
            const arrivalStatus = getStatus(train.arrival, train.estimated_arrival, train.actual_arrival, train.cancelled_arrival);
            const departureStatus = getStatus(train.departure, train.estimated_departure, train.actual_departure, train.cancelled_departure);

            row.innerHTML = `
              <td><a href="/train/${country}/${train.train_number}/${train.departure_date}">${train.train_type} ${displayNumber}</a></td>
              <td>${train.origin_name}</td>
              <td>${train.destination_name}</td>
              <td>${arrivalDisplay}</td>
              <td>${departureDisplay}</td>
              <td>${train.platform || '—'}</td>
              <td>${train.arrival ? arrivalStatus : departureStatus}</td>
            `;
            timetableBody.appendChild(row);
          });
        } else {
          noTrainsMessage.style.display = 'block';
        }
      } catch (error) {
        console.error('Failed to fetch station data:', error);
        stationTitle.innerText = 'Error loading data';
        timetableBody.innerHTML = '<tr><td colspan="7">Error loading timetable.</td></tr>';
      }
    });